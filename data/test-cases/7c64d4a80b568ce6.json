{"uid":"7c64d4a80b568ce6","name":"test_page_up[edge]","fullName":"tests.test_home_page_actions#test_page_up","historyId":"f1093a3901cc3671427f4baec938713b","time":{"start":1761239251751,"stop":1761239251751,"duration":0},"status":"broken","statusMessage":"selenium.common.exceptions.SessionNotCreatedException: Message: session not created\nfrom chrome not reachable; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#sessionnotcreatedexception\nStacktrace:\n#0 0x55bae98f2cce <unknown>\n#1 0x55bae937c50e <unknown>\n#2 0x55bae9369e73 <unknown>\n#3 0x55bae93bc16b <unknown>\n#4 0x55bae93b84e2 <unknown>\n#5 0x55bae93b1e6d <unknown>\n#6 0x55bae9401663 <unknown>\n#7 0x55bae9400de6 <unknown>\n#8 0x55bae93f25d3 <unknown>\n#9 0x55bae93c0228 <unknown>\n#10 0x55bae93c0e11 <unknown>\n#11 0x55bae98c216e <unknown>\n#12 0x55bae98c52cb <unknown>\n#13 0x55bae98c4d2b <unknown>\n#14 0x55bae98c5785 <unknown>\n#15 0x55bae98af4e3 <unknown>\n#16 0x55bae98c5b52 <unknown>\n#17 0x55bae9899242 <unknown>\n#18 0x55bae98e1078 <unknown>\n#19 0x55bae98e129c <unknown>\n#20 0x55bae98f1b59 <unknown>\n#21 0x7f050029caa4 <unknown>\n#22 0x7f0500329c6c <unknown>","statusTrace":"request = <SubRequest 'driver' for <Function test_page_up[edge]>>\n\n    @pytest.fixture\n    def driver(request):\n        \"\"\"PyTest fixture that returns a WebDriver instance.\n    \n        Use `@pytest.mark.parametrize('driver', ['chrome'], indirect=True)` in tests to pass browser.\n        The fixture supports remote execution via the SELENIUM_REMOTE_URL environment variable.\n        \"\"\"\n        browser = request.param if hasattr(request, 'param') else os.environ.get('BROWSER', 'chrome')\n        remote_url = os.environ.get('SELENIUM_REMOTE_URL')\n        caps = None\n>       driver = get_driver(browser, remote_url, caps)\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nconftest.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nutils/driver_utils.py:95: in get_driver\n    return _local_driver(browser)\n           ^^^^^^^^^^^^^^^^^^^^^^\nutils/driver_utils.py:52: in _local_driver\n    return webdriver.Edge(options=options)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/selenium/webdriver/edge/webdriver.py:46: in __init__\n    super().__init__(\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/selenium/webdriver/chromium/webdriver.py:71: in __init__\n    super().__init__(command_executor=executor, options=options)\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:263: in __init__\n    self.start_session(capabilities)\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:366: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:458: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f577123d950>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created\\\\nfrom chrome not rea...\\\\n#20 0x55bae98f1b59 \\\\u003Cunknown>\\\\n#21 0x7f050029caa4 \\\\u003Cunknown>\\\\n#22 0x7f0500329c6c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\") if isinstance(message, dict) else None\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created\nE       from chrome not reachable; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#sessionnotcreatedexception\nE       Stacktrace:\nE       #0 0x55bae98f2cce <unknown>\nE       #1 0x55bae937c50e <unknown>\nE       #2 0x55bae9369e73 <unknown>\nE       #3 0x55bae93bc16b <unknown>\nE       #4 0x55bae93b84e2 <unknown>\nE       #5 0x55bae93b1e6d <unknown>\nE       #6 0x55bae9401663 <unknown>\nE       #7 0x55bae9400de6 <unknown>\nE       #8 0x55bae93f25d3 <unknown>\nE       #9 0x55bae93c0228 <unknown>\nE       #10 0x55bae93c0e11 <unknown>\nE       #11 0x55bae98c216e <unknown>\nE       #12 0x55bae98c52cb <unknown>\nE       #13 0x55bae98c4d2b <unknown>\nE       #14 0x55bae98c5785 <unknown>\nE       #15 0x55bae98af4e3 <unknown>\nE       #16 0x55bae98c5b52 <unknown>\nE       #17 0x55bae9899242 <unknown>\nE       #18 0x55bae98e1078 <unknown>\nE       #19 0x55bae98e129c <unknown>\nE       #20 0x55bae98f1b59 <unknown>\nE       #21 0x7f050029caa4 <unknown>\nE       #22 0x7f0500329c6c <unknown>\n\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:232: SessionNotCreatedException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"driver","time":{"start":1761239251752,"stop":1761239324679,"duration":72927},"status":"broken","statusMessage":"selenium.common.exceptions.SessionNotCreatedException: Message: session not created\nfrom chrome not reachable; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#sessionnotcreatedexception\nStacktrace:\n#0 0x55bae98f2cce <unknown>\n#1 0x55bae937c50e <unknown>\n#2 0x55bae9369e73 <unknown>\n#3 0x55bae93bc16b <unknown>\n#4 0x55bae93b84e2 <unknown>\n#5 0x55bae93b1e6d <unknown>\n#6 0x55bae9401663 <unknown>\n#7 0x55bae9400de6 <unknown>\n#8 0x55bae93f25d3 <unknown>\n#9 0x55bae93c0228 <unknown>\n#10 0x55bae93c0e11 <unknown>\n#11 0x55bae98c216e <unknown>\n#12 0x55bae98c52cb <unknown>\n#13 0x55bae98c4d2b <unknown>\n#14 0x55bae98c5785 <unknown>\n#15 0x55bae98af4e3 <unknown>\n#16 0x55bae98c5b52 <unknown>\n#17 0x55bae9899242 <unknown>\n#18 0x55bae98e1078 <unknown>\n#19 0x55bae98e129c <unknown>\n#20 0x55bae98f1b59 <unknown>\n#21 0x7f050029caa4 <unknown>\n#22 0x7f0500329c6c <unknown>\n\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/pluggy/_callers.py\", line 38, in run_old_style_hookwrapper\n    res = yield\n          ^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/pluggy/_callers.py\", line 139, in _multicall\n    teardown.throw(exception)\n  File \"/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/_pytest/setuponly.py\", line 36, in pytest_fixture_setup\n    return (yield)\n            ^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/pluggy/_callers.py\", line 121, in _multicall\n    res = hook_impl.function(*args)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/_pytest/fixtures.py\", line 1196, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/_pytest/fixtures.py\", line 923, in call_fixture_func\n    fixture_result = next(generator)\n                     ^^^^^^^^^^^^^^^\n  File \"/home/runner/work/ASC_Capstone/ASC_Capstone/conftest.py\", line 18, in driver\n    driver = get_driver(browser, remote_url, caps)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/ASC_Capstone/ASC_Capstone/utils/driver_utils.py\", line 95, in get_driver\n    return _local_driver(browser)\n           ^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/ASC_Capstone/ASC_Capstone/utils/driver_utils.py\", line 52, in _local_driver\n    return webdriver.Edge(options=options)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/selenium/webdriver/edge/webdriver.py\", line 46, in __init__\n    super().__init__(\n  File \"/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/selenium/webdriver/chromium/webdriver.py\", line 71, in __init__\n    super().__init__(command_executor=executor, options=options)\n  File \"/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py\", line 263, in __init__\n    self.start_session(capabilities)\n  File \"/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py\", line 366, in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py\", line 458, in execute\n    self.error_handler.check_response(response)\n  File \"/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py\", line 232, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"home_page","time":{"start":1761239325005,"stop":1761239325656,"duration":651},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_home_page_actions"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2177-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_home_page_actions"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"driver","value":"'edge'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"7c64d4a80b568ce6.json","parameterValues":["'edge'"]}