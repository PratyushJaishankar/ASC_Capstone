{"uid":"c1cf7be9f0b5dad4","name":"test_search_customer[search_data1-chrome]","fullName":"tests.test_search_product#test_search_customer","historyId":"3accdb7e2b5eb2f4374796612a95c234","time":{"start":1761073711779,"stop":1761073742466,"duration":30687},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message:","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"1c74904149140461d2c79ca1f240aa41\")>\nsearch_data = {'product': 'soap'}\n\n    @pytest.mark.parametrize(\"driver\", browsers, indirect=True)\n    @pytest.mark.parametrize(\"search_data\", get_data(\"data/Complete_Test_Data/search_data.xlsx\"))\n    @allure.feature(\"Search Page\")\n    def test_search_customer(driver, search_data):\n        driver.get(\"https://market99.com/\")\n        search_page = SearchPage(driver)\n        time.sleep(2)\n        product_name = search_data[\"product\"]\n    \n        search_page.open_search()\n        search_page.search_product(product_name)\n        time.sleep(2)\n        current_url = driver.current_url\n        assert \"search\" in current_url, f\"'search' not found in URL: {current_url}\"\n        assert product_name in current_url, f\"'{product_name}' not found in URL: {current_url}\"\n    \n        search_page.get_result(product_name)\n        time.sleep(2)\n        current_url = driver.current_url\n        assert \"products\" in current_url, f\"'products' not found in URL: {current_url}\"\n        assert product_name in current_url, f\"'{product_name}' not found in URL: {current_url}\"\n    \n        search_page.copy_code()\n        search_page.paste_code()\n    \n        quantity_query = 6\n        time.sleep(2)\n>       search_page.add_product_to_cart(str(quantity_query))\n\ntests/test_search_product.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npage_objects/search_page.py:37: in add_product_to_cart\n    self.cart_dropdown(self.QUANTITY_INPUT, quantity_locator)\npage_objects/base_page.py:14: in cart_dropdown\n    dropdown_toggle = self.wait.until(EC.element_to_be_clickable(by_locator))\n                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"1c74904149140461d2c79ca1f240aa41\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x7f9e42995300>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/selenium/webdriver/support/wait.py:138: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"driver","time":{"start":1761073711377,"stop":1761073711778,"duration":401},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message:","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"1c74904149140461d2c79ca1f240aa41\")>\nsearch_data = {'product': 'soap'}\n\n    @pytest.mark.parametrize(\"driver\", browsers, indirect=True)\n    @pytest.mark.parametrize(\"search_data\", get_data(\"data/Complete_Test_Data/search_data.xlsx\"))\n    @allure.feature(\"Search Page\")\n    def test_search_customer(driver, search_data):\n        driver.get(\"https://market99.com/\")\n        search_page = SearchPage(driver)\n        time.sleep(2)\n        product_name = search_data[\"product\"]\n    \n        search_page.open_search()\n        search_page.search_product(product_name)\n        time.sleep(2)\n        current_url = driver.current_url\n        assert \"search\" in current_url, f\"'search' not found in URL: {current_url}\"\n        assert product_name in current_url, f\"'{product_name}' not found in URL: {current_url}\"\n    \n        search_page.get_result(product_name)\n        time.sleep(2)\n        current_url = driver.current_url\n        assert \"products\" in current_url, f\"'products' not found in URL: {current_url}\"\n        assert product_name in current_url, f\"'{product_name}' not found in URL: {current_url}\"\n    \n        search_page.copy_code()\n        search_page.paste_code()\n    \n        quantity_query = 6\n        time.sleep(2)\n>       search_page.add_product_to_cart(str(quantity_query))\n\ntests/test_search_product.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npage_objects/search_page.py:37: in add_product_to_cart\n    self.cart_dropdown(self.QUANTITY_INPUT, quantity_locator)\npage_objects/base_page.py:14: in cart_dropdown\n    dropdown_toggle = self.wait.until(EC.element_to_be_clickable(by_locator))\n                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"1c74904149140461d2c79ca1f240aa41\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x7f9e42995300>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/selenium/webdriver/support/wait.py:138: TimeoutException","steps":[],"attachments":[{"uid":"28fd4950dd4c88d2","name":"screenshot","source":"28fd4950dd4c88d2.png","type":"image/png","size":437263}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"driver::0","time":{"start":1761073742676,"stop":1761073742752,"duration":76},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"feature","value":"Search Page"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_search_product"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2050-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_search_product"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"driver","value":"'chrome'"},{"name":"search_data","value":"{'product': 'soap'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"c1cf7be9f0b5dad4.json","parameterValues":["'chrome'","{'product': 'soap'}"]}