{"name": "test_add_customer[customer_data0-chrome]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: unknown error: cannot determine loading status\nfrom target frame detached: received Inspector.detached event\n  (Session info: chrome=141.0.7390.108)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff67ea6e9e5+80021]\n\tGetHandleVerifier [0x0x7ff67ea6ea40+80112]\n\t(No symbol) [0x0x7ff67e7f060f]\n\t(No symbol) [0x0x7ff67e7df0ab]\n\t(No symbol) [0x0x7ff67e7de08e]\n\t(No symbol) [0x0x7ff67e7dd859]\n\t(No symbol) [0x0x7ff67e7dd51d]\n\t(No symbol) [0x0x7ff67e7db08c]\n\t(No symbol) [0x0x7ff67e7dbb0b]\n\t(No symbol) [0x0x7ff67e7eb064]\n\t(No symbol) [0x0x7ff67e801161]\n\t(No symbol) [0x0x7ff67e8083aa]\n\t(No symbol) [0x0x7ff67e7dc2be]\n\t(No symbol) [0x0x7ff67e800952]\n\t(No symbol) [0x0x7ff67e8999f6]\n\t(No symbol) [0x0x7ff67e871003]\n\t(No symbol) [0x0x7ff67e8395d1]\n\t(No symbol) [0x0x7ff67e83a3f3]\n\tGetHandleVerifier [0x0x7ff67ed2dd8d+2960445]\n\tGetHandleVerifier [0x0x7ff67ed2804a+2936570]\n\tGetHandleVerifier [0x0x7ff67ed48a87+3070263]\n\tGetHandleVerifier [0x0x7ff67ea884ce+185214]\n\tGetHandleVerifier [0x0x7ff67ea8ff1f+216527]\n\tGetHandleVerifier [0x0x7ff67ea77c24+117460]\n\tGetHandleVerifier [0x0x7ff67ea77ddf+117903]\n\tGetHandleVerifier [0x0x7ff67ea5dcb8+11112]\n\tBaseThreadInitThunk [0x0x7ffdeb0de8d7+23]\n\tRtlUserThreadStart [0x0x7ffdebf2c53c+44]", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"09a5e79bc9a2102648ce141f5ae0e9cd\")>, customer_data = {'email': 'aarav.shasddasarma123@example.com', 'first_name': 'Aarav', 'last_name': 'Sharma', 'password': 'Pass@1234', ...}\n\n    @pytest.mark.parametrize(\"driver\", browsers, indirect=True)\n    @pytest.mark.parametrize(\"customer_data\", get_add_customer_data(\"data/add_customer_data.csv\"))\n    @allure.feature(\"Add Customer\")\n    def test_add_customer(driver, customer_data):\n        driver.get(\"https://market99.com/\")\n        add_customer_page = AddCustomerPage(driver)\n>       add_customer_page.open_registration()\n\ntests\\test_add_customer.py:15: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npage_objects\\Signup.py:17: in open_registration\n    wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, \"a[href='/account']\"))).click()\nC:\\Users\\pratj\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:119: in click\n    self._execute(Command.CLICK_ELEMENT)\nC:\\Users\\pratj\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:572: in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nC:\\Users\\pratj\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:458: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000022F9B0323C0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: cannot determine loading status\\...ff67ea5dcb8+11112]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffdeb0de8d7+23]\\\\n\\\\tRtlUserThreadStart [0x0x7ffdebf2c53c+44]\\\\n\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\") if isinstance(message, dict) else None\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: cannot determine loading status\nE       from target frame detached: received Inspector.detached event\nE         (Session info: chrome=141.0.7390.108)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff67ea6e9e5+80021]\nE       \tGetHandleVerifier [0x0x7ff67ea6ea40+80112]\nE       \t(No symbol) [0x0x7ff67e7f060f]\nE       \t(No symbol) [0x0x7ff67e7df0ab]\nE       \t(No symbol) [0x0x7ff67e7de08e]\nE       \t(No symbol) [0x0x7ff67e7dd859]\nE       \t(No symbol) [0x0x7ff67e7dd51d]\nE       \t(No symbol) [0x0x7ff67e7db08c]\nE       \t(No symbol) [0x0x7ff67e7dbb0b]\nE       \t(No symbol) [0x0x7ff67e7eb064]\nE       \t(No symbol) [0x0x7ff67e801161]\nE       \t(No symbol) [0x0x7ff67e8083aa]\nE       \t(No symbol) [0x0x7ff67e7dc2be]\nE       \t(No symbol) [0x0x7ff67e800952]\nE       \t(No symbol) [0x0x7ff67e8999f6]\nE       \t(No symbol) [0x0x7ff67e871003]\nE       \t(No symbol) [0x0x7ff67e8395d1]\nE       \t(No symbol) [0x0x7ff67e83a3f3]\nE       \tGetHandleVerifier [0x0x7ff67ed2dd8d+2960445]\nE       \tGetHandleVerifier [0x0x7ff67ed2804a+2936570]\nE       \tGetHandleVerifier [0x0x7ff67ed48a87+3070263]\nE       \tGetHandleVerifier [0x0x7ff67ea884ce+185214]\nE       \tGetHandleVerifier [0x0x7ff67ea8ff1f+216527]\nE       \tGetHandleVerifier [0x0x7ff67ea77c24+117460]\nE       \tGetHandleVerifier [0x0x7ff67ea77ddf+117903]\nE       \tGetHandleVerifier [0x0x7ff67ea5dcb8+11112]\nE       \tBaseThreadInitThunk [0x0x7ffdeb0de8d7+23]\nE       \tRtlUserThreadStart [0x0x7ffdebf2c53c+44]\n\nC:\\Users\\pratj\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: WebDriverException"}, "parameters": [{"name": "customer_data", "value": "{'first_name': 'Aarav', 'last_name': 'Sharma', 'email': 'aarav.shasddasarma123@example.com', 'password': 'Pass@1234', 'result': 'failed'}"}, {"name": "driver", "value": "'chrome'"}], "start": 1760920474587, "stop": 1760920481526, "uuid": "d691dcf4-ab54-4895-b931-ae647fa3a2ff", "historyId": "b7aafd6dbe38f9d9f1b6ef976aa10037", "testCaseId": "d695b5138ee575a360be0b7a1eb4730b", "fullName": "tests.test_add_customer#test_add_customer", "labels": [{"name": "feature", "value": "Add Customer"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_add_customer"}, {"name": "host", "value": "FXDT"}, {"name": "thread", "value": "1784-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_add_customer"}], "titlePath": ["tests", "test_add_customer.py"]}