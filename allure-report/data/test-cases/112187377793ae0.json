{"uid":"112187377793ae0","name":"test_login_logout[chrome]","fullName":"tests.test_login_logout#test_login_logout","historyId":"2e6e2a225cc75f6dabe685f9178db438","time":{"start":1761072799839,"stop":1761072813314,"duration":13475},"description":"Positive login tests using positive_login_data.csv","descriptionHtml":"<p>Positive login tests using positive_login_data.csv</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x55ef860cdfba <unknown>\n#1 0x55ef85b526d0 <unknown>\n#2 0x55ef85ba42aa <unknown>\n#3 0x55ef85ba4541 <unknown>\n#4 0x55ef85bf26c4 <unknown>\n#5 0x55ef85bc9e5d <unknown>\n#6 0x55ef85befb54 <unknown>\n#7 0x55ef85bc9c03 <unknown>\n#8 0x55ef85b967a8 <unknown>\n#9 0x55ef85b97421 <unknown>\n#10 0x55ef86092b28 <unknown>\n#11 0x55ef8609687f <unknown>\n#12 0x55ef8607ac49 <unknown>\n#13 0x55ef86097405 <unknown>\n#14 0x55ef860604ff <unknown>\n#15 0x55ef860bb258 <unknown>\n#16 0x55ef860bb432 <unknown>\n#17 0x55ef860ccfa3 <unknown>\n#18 0x7ff8a1c9caa4 <unknown>\n#19 0x7ff8a1d29c6c <unknown>","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"e5fec7598c17b88ab3bdc9e9bea3639d\")>\n\n    @pytest.mark.feature(\"Login & Logout\")\n    @pytest.mark.parametrize(\"driver\", browsers, indirect=True)\n    def test_login_logout(driver):\n        \"\"\"Positive login tests using positive_login_data.csv\"\"\"\n        # Simple log for humans: indicate which test started\n        print(\"Starting positive login/logout tests\")\n        driver.get(\"https://market99.com/\")\n        login_page = LoginPage(driver)\n>       login_page.open_login()\n\ntests/test_login_logout.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npage_objects/login_page.py:32: in open_login\n    self.click(self.LOGIN_WITH_EMAIL_BUTTON)\npage_objects/base_page.py:43: in click\n    self.wait.until(EC.element_to_be_clickable(by_locator)).click()\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"e5fec7598c17b88ab3bdc9e9bea3639d\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x7f939638eb60>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       #0 0x55ef860cdfba <unknown>\nE       #1 0x55ef85b526d0 <unknown>\nE       #2 0x55ef85ba42aa <unknown>\nE       #3 0x55ef85ba4541 <unknown>\nE       #4 0x55ef85bf26c4 <unknown>\nE       #5 0x55ef85bc9e5d <unknown>\nE       #6 0x55ef85befb54 <unknown>\nE       #7 0x55ef85bc9c03 <unknown>\nE       #8 0x55ef85b967a8 <unknown>\nE       #9 0x55ef85b97421 <unknown>\nE       #10 0x55ef86092b28 <unknown>\nE       #11 0x55ef8609687f <unknown>\nE       #12 0x55ef8607ac49 <unknown>\nE       #13 0x55ef86097405 <unknown>\nE       #14 0x55ef860604ff <unknown>\nE       #15 0x55ef860bb258 <unknown>\nE       #16 0x55ef860bb432 <unknown>\nE       #17 0x55ef860ccfa3 <unknown>\nE       #18 0x7ff8a1c9caa4 <unknown>\nE       #19 0x7ff8a1d29c6c <unknown>\n\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/selenium/webdriver/support/wait.py:138: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"driver","time":{"start":1761072782565,"stop":1761072799838,"duration":17273},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Positive login tests using positive_login_data.csv","status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x55ef860cdfba <unknown>\n#1 0x55ef85b526d0 <unknown>\n#2 0x55ef85ba42aa <unknown>\n#3 0x55ef85ba4541 <unknown>\n#4 0x55ef85bf26c4 <unknown>\n#5 0x55ef85bc9e5d <unknown>\n#6 0x55ef85befb54 <unknown>\n#7 0x55ef85bc9c03 <unknown>\n#8 0x55ef85b967a8 <unknown>\n#9 0x55ef85b97421 <unknown>\n#10 0x55ef86092b28 <unknown>\n#11 0x55ef8609687f <unknown>\n#12 0x55ef8607ac49 <unknown>\n#13 0x55ef86097405 <unknown>\n#14 0x55ef860604ff <unknown>\n#15 0x55ef860bb258 <unknown>\n#16 0x55ef860bb432 <unknown>\n#17 0x55ef860ccfa3 <unknown>\n#18 0x7ff8a1c9caa4 <unknown>\n#19 0x7ff8a1d29c6c <unknown>","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"e5fec7598c17b88ab3bdc9e9bea3639d\")>\n\n    @pytest.mark.feature(\"Login & Logout\")\n    @pytest.mark.parametrize(\"driver\", browsers, indirect=True)\n    def test_login_logout(driver):\n        \"\"\"Positive login tests using positive_login_data.csv\"\"\"\n        # Simple log for humans: indicate which test started\n        print(\"Starting positive login/logout tests\")\n        driver.get(\"https://market99.com/\")\n        login_page = LoginPage(driver)\n>       login_page.open_login()\n\ntests/test_login_logout.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npage_objects/login_page.py:32: in open_login\n    self.click(self.LOGIN_WITH_EMAIL_BUTTON)\npage_objects/base_page.py:43: in click\n    self.wait.until(EC.element_to_be_clickable(by_locator)).click()\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"e5fec7598c17b88ab3bdc9e9bea3639d\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x7f939638eb60>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       #0 0x55ef860cdfba <unknown>\nE       #1 0x55ef85b526d0 <unknown>\nE       #2 0x55ef85ba42aa <unknown>\nE       #3 0x55ef85ba4541 <unknown>\nE       #4 0x55ef85bf26c4 <unknown>\nE       #5 0x55ef85bc9e5d <unknown>\nE       #6 0x55ef85befb54 <unknown>\nE       #7 0x55ef85bc9c03 <unknown>\nE       #8 0x55ef85b967a8 <unknown>\nE       #9 0x55ef85b97421 <unknown>\nE       #10 0x55ef86092b28 <unknown>\nE       #11 0x55ef8609687f <unknown>\nE       #12 0x55ef8607ac49 <unknown>\nE       #13 0x55ef86097405 <unknown>\nE       #14 0x55ef860604ff <unknown>\nE       #15 0x55ef860bb258 <unknown>\nE       #16 0x55ef860bb432 <unknown>\nE       #17 0x55ef860ccfa3 <unknown>\nE       #18 0x7ff8a1c9caa4 <unknown>\nE       #19 0x7ff8a1d29c6c <unknown>\n\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/selenium/webdriver/support/wait.py:138: TimeoutException","steps":[],"attachments":[{"uid":"71a47e17a9e7d38","name":"screenshot","source":"71a47e17a9e7d38.png","type":"image/png","size":56817},{"uid":"9796cf4a694486f3","name":"stdout","source":"9796cf4a694486f3.txt","type":"text/plain","size":37}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"driver::0","time":{"start":1761072813487,"stop":1761072813562,"duration":75},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_login_logout"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2029-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_login_logout"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"driver","value":"'chrome'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"112187377793ae0.json","parameterValues":["'chrome'"]}